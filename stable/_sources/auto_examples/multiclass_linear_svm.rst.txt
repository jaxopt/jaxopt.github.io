
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/multiclass_linear_svm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_multiclass_linear_svm.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_multiclass_linear_svm.py:


Multiclass linear SVM (without intercept).
==========================================

.. GENERATED FROM PYTHON SOURCE LINES 19-70

.. code-block:: default


    from absl import app
    import jax.numpy as jnp
    from jaxopt import BlockCoordinateDescent
    from jaxopt import objective
    from jaxopt import projection
    from jaxopt import prox
    from sklearn import datasets
    from sklearn import preprocessing
    from sklearn import svm


    def multiclass_linear_svm_skl(X, y, lam, tol=1e-5):
      svc = svm.LinearSVC(loss="hinge", dual=True, multi_class="crammer_singer",
                          C=1.0 / lam, fit_intercept=False, tol=tol).fit(X, y)
      return svc.coef_.T


    def main(argv):
      del argv

      # Generate data.
      n_samples, n_classes = 20, 3
      X, y = datasets.make_classification(n_samples=n_samples, n_features=5,
                                          n_informative=3, n_classes=n_classes,
                                          random_state=0)
      Y = preprocessing.LabelBinarizer().fit_transform(y)
      Y = jnp.array(Y)

      # Set up parameters.
      block_prox = prox.make_prox_from_projection(projection.projection_simplex)
      fun = objective.multiclass_linear_svm_dual
      data = (X, Y)
      lam = 1000.0
      beta_init = jnp.ones((n_samples, n_classes)) / n_classes

      # Run solver.
      bcd = BlockCoordinateDescent(fun=fun, block_prox=block_prox,
                                   maxiter=3500, tol=1e-5)
      sol = bcd.run(beta_init, hyperparams_prox=None, lam=lam, data=data)

      # Compare against sklearn.
      W_skl = multiclass_linear_svm_skl(X, y, lam)
      W_fit = jnp.dot(X.T, (Y - sol.params)) / lam

      print(W_skl)
      print(W_fit)


    if __name__ == "__main__":
      app.run(main)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_multiclass_linear_svm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: multiclass_linear_svm.py <multiclass_linear_svm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: multiclass_linear_svm.ipynb <multiclass_linear_svm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
