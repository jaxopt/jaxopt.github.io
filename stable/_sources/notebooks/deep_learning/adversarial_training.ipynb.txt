{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Adversarial training\n",
    "\n",
    "\n",
    "The following code trains a convolutional neural network (CNN) to be robust\n",
    "with respect to the projected gradient descent (PGD) method.\n",
    "\n",
    "The Projected Gradient Descent Method (PGD) is a simple yet effective method to\n",
    "generate adversarial images. At each iteration, it adds a small perturbation\n",
    "in the direction of the sign of the gradient with respect to the input followed\n",
    "by a projection onto the infinity ball. The gradient sign ensures this\n",
    "perturbation locally maximizes the objective, while the projection ensures this\n",
    "perturbation stays on the boundary of the infinity ball.\n",
    "\n",
    "## References\n",
    "\n",
    "  Goodfellow, Ian J., Jonathon Shlens, and Christian Szegedy. \"Explaining\n",
    "  and harnessing adversarial examples.\" https://arxiv.org/abs/1412.6572\n",
    "\n",
    "  Madry, Aleksander, et al. \"Towards deep learning models resistant to\n",
    "  adversarial attacks.\", https://arxiv.org/pdf/1706.06083.pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%capture\n",
    "%pip install jaxopt flax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime\n",
    "import collections\n",
    "\n",
    "from flax import linen as nn\n",
    "import jax\n",
    "from jax import numpy as jnp\n",
    "from jaxopt import loss\n",
    "from jaxopt import OptaxSolver\n",
    "from jaxopt import tree_util\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "import optax\n",
    "import tensorflow as tf\n",
    "import tensorflow_datasets as tfds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "Flags = collections.namedtuple(\n",
    "    \"Flags\",\n",
    "    [\n",
    "        \"l2reg\",  # amount of L2 regularization in the objective\n",
    "        \"learning_rate\",  # learning rate for the Adam optimizer\n",
    "        \"epochs\",  # number of passes over the dataset\n",
    "        \"dataset\",  # one of \"mnist\", \"kmnist\", \"emnist\", \"fashion_mnist\", \"cifar10\", \"cifar100\"\n",
    "        \"epsilon\", # Adversarial perturbations lie within the infinity-ball of radius epsilon.\n",
    "        \"train_batch_size\",  # Batch size at train time\n",
    "        \"test_batch_size\"  # Batch size at test time\n",
    "    ])\n",
    "\n",
    "FLAGS = Flags(\n",
    "    l2reg=0.0001,\n",
    "    learning_rate=0.001,\n",
    "    epochs=10,\n",
    "    dataset=\"mnist\",\n",
    "    epsilon=0.01,\n",
    "    train_batch_size=128,\n",
    "    test_batch_size=128)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_dataset(split, *, is_training, batch_size):\n",
    "  \"\"\"Load dataset using tensorflow_datasets.\"\"\"\n",
    "  version = 3\n",
    "  ds, ds_info = tfds.load(\n",
    "      f\"{FLAGS.dataset}:{version}.*.*\",\n",
    "      as_supervised=True,  # remove useless keys\n",
    "      split=split,\n",
    "      with_info=True)\n",
    "  ds = ds.cache().repeat()\n",
    "  if is_training:\n",
    "    ds = ds.shuffle(10 * batch_size, seed=0)\n",
    "  ds = ds.batch(batch_size)\n",
    "  return iter(tfds.as_numpy(ds)), ds_info\n",
    "\n",
    "\n",
    "class CNN(nn.Module):\n",
    "  \"\"\"A simple CNN model.\"\"\"\n",
    "  num_classes: int\n",
    "\n",
    "  @nn.compact\n",
    "  def __call__(self, x):\n",
    "    x = nn.Conv(features=32, kernel_size=(3, 3))(x)\n",
    "    x = nn.relu(x)\n",
    "    x = nn.avg_pool(x, window_shape=(2, 2), strides=(2, 2))\n",
    "    x = nn.Conv(features=64, kernel_size=(3, 3))(x)\n",
    "    x = nn.relu(x)\n",
    "    x = nn.avg_pool(x, window_shape=(2, 2), strides=(2, 2))\n",
    "    x = x.reshape((x.shape[0], -1))  # flatten\n",
    "    x = nn.Dense(features=256)(x)\n",
    "    x = nn.relu(x)\n",
    "    x = nn.Dense(features=self.num_classes)(x)\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hide any GPUs from TensorFlow. Otherwise TF might reserve memory and make\n",
    "# it unavailable to JAX.\n",
    "tf.config.experimental.set_visible_devices([], \"GPU\")\n",
    "train_ds, ds_info = load_dataset(\"train\", is_training=True,\n",
    "                                 batch_size=FLAGS.train_batch_size)\n",
    "test_ds, _ = load_dataset(\"test\", is_training=False,\n",
    "                          batch_size=FLAGS.test_batch_size)\n",
    "input_shape = (1,) + ds_info.features[\"image\"].shape\n",
    "num_classes = ds_info.features[\"label\"].num_classes\n",
    "iter_per_epoch_train = ds_info.splits['train'].num_examples // FLAGS.train_batch_size\n",
    "iter_per_epoch_test = ds_info.splits['test'].num_examples // FLAGS.test_batch_size\n",
    "\n",
    "\n",
    "net = CNN(num_classes)\n",
    "\n",
    "@jax.jit\n",
    "def accuracy(params, data):\n",
    "  inputs, labels = data\n",
    "  logits = net.apply({\"params\": params}, inputs)\n",
    "  return jnp.mean(jnp.argmax(logits, axis=-1) == labels)\n",
    "\n",
    "logistic_loss = jax.vmap(loss.multiclass_logistic_loss)\n",
    "\n",
    "@jax.jit\n",
    "def loss_fun(params, l2reg, data):\n",
    "  \"\"\"Compute the loss of the network.\"\"\"\n",
    "  inputs, labels = data\n",
    "  x = inputs.astype(jnp.float32)\n",
    "  logits = net.apply({\"params\": params}, x)\n",
    "  sqnorm = tree_util.tree_l2_norm(params, squared=True)\n",
    "  loss_value = jnp.mean(logistic_loss(labels, logits))\n",
    "  return loss_value + 0.5 * l2reg * sqnorm\n",
    "\n",
    "@jax.jit\n",
    "def pgd_attack(image, label, params, epsilon=0.1, maxiter=10):\n",
    "  \"\"\"PGD attack on the L-infinity ball with radius epsilon.\n",
    "\n",
    "  Args:\n",
    "    image: array-like, input data for the CNN\n",
    "    label: integer, class label corresponding to image\n",
    "    params: tree, parameters of the model to attack\n",
    "    epsilon: float, radius of the L-infinity ball.\n",
    "    maxiter: int, number of iterations of this algorithm.\n",
    "\n",
    "  Returns:\n",
    "    perturbed_image: Adversarial image on the boundary of the L-infinity ball\n",
    "      of radius epsilon and centered at image.\n",
    "\n",
    "  Notes:\n",
    "    PGD attack is described in (Madry et al. 2017),\n",
    "    https://arxiv.org/pdf/1706.06083.pdf\n",
    "  \"\"\"\n",
    "  image_perturbation = jnp.zeros_like(image)\n",
    "  def adversarial_loss(perturbation):\n",
    "    return loss_fun(params, 0, (image + perturbation, label))\n",
    "\n",
    "  grad_adversarial = jax.grad(adversarial_loss)\n",
    "  for _ in range(maxiter):\n",
    "    # compute gradient of the loss wrt to the image\n",
    "    sign_grad = jnp.sign(grad_adversarial(image_perturbation))\n",
    "\n",
    "    # heuristic step-size 2 eps / maxiter\n",
    "    image_perturbation += (2 * epsilon / maxiter) * sign_grad\n",
    "    # projection step onto the L-infinity ball centered at image\n",
    "    image_perturbation = jnp.clip(image_perturbation, - epsilon, epsilon)\n",
    "\n",
    "  # clip the image to ensure pixels are between 0 and 1\n",
    "  return jnp.clip(image + image_perturbation, 0, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Show on which platform JAX is running. The code below should take around 3 min to run on GPU but might take longer on CPUs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "JAX running on GPU\n"
     ]
    }
   ],
   "source": [
    "print(\"JAX running on\", jax.devices()[0].platform.upper())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/pedregosa/anaconda3/envs/jaxopt/lib/python3.9/site-packages/jax/_src/tree_util.py:189: FutureWarning: jax.tree_util.tree_multimap() is deprecated. Please use jax.tree_util.tree_map() instead as a drop-in replacement.\n",
      "  warnings.warn('jax.tree_util.tree_multimap() is deprecated. Please use jax.tree_util.tree_map() '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0 out of 10\n",
      "Accuracy on train set: 0.982\n",
      "Accuracy on test set: 0.982\n",
      "Adversarial accuracy on train set: 0.979\n",
      "Adversarial accuracy on test set: 0.979\n",
      "Time elapsed: 0:00:17\n",
      "\n",
      "Epoch 1 out of 10\n",
      "Accuracy on train set: 0.987\n",
      "Accuracy on test set: 0.987\n",
      "Adversarial accuracy on train set: 0.984\n",
      "Adversarial accuracy on test set: 0.983\n",
      "Time elapsed: 0:00:30\n",
      "\n",
      "Epoch 2 out of 10\n",
      "Accuracy on train set: 0.989\n",
      "Accuracy on test set: 0.988\n",
      "Adversarial accuracy on train set: 0.986\n",
      "Adversarial accuracy on test set: 0.984\n",
      "Time elapsed: 0:00:43\n",
      "\n",
      "Epoch 3 out of 10\n",
      "Accuracy on train set: 0.992\n",
      "Accuracy on test set: 0.990\n",
      "Adversarial accuracy on train set: 0.990\n",
      "Adversarial accuracy on test set: 0.988\n",
      "Time elapsed: 0:00:56\n",
      "\n",
      "Epoch 4 out of 10\n",
      "Accuracy on train set: 0.994\n",
      "Accuracy on test set: 0.990\n",
      "Adversarial accuracy on train set: 0.992\n",
      "Adversarial accuracy on test set: 0.988\n",
      "Time elapsed: 0:01:10\n",
      "\n",
      "Epoch 5 out of 10\n",
      "Accuracy on train set: 0.994\n",
      "Accuracy on test set: 0.990\n",
      "Adversarial accuracy on train set: 0.992\n",
      "Adversarial accuracy on test set: 0.987\n",
      "Time elapsed: 0:01:23\n",
      "\n",
      "Epoch 6 out of 10\n",
      "Accuracy on train set: 0.995\n",
      "Accuracy on test set: 0.991\n",
      "Adversarial accuracy on train set: 0.994\n",
      "Adversarial accuracy on test set: 0.988\n",
      "Time elapsed: 0:01:36\n",
      "\n",
      "Epoch 7 out of 10\n",
      "Accuracy on train set: 0.995\n",
      "Accuracy on test set: 0.990\n",
      "Adversarial accuracy on train set: 0.993\n",
      "Adversarial accuracy on test set: 0.988\n",
      "Time elapsed: 0:01:50\n",
      "\n",
      "Epoch 8 out of 10\n",
      "Accuracy on train set: 0.994\n",
      "Accuracy on test set: 0.989\n",
      "Adversarial accuracy on train set: 0.992\n",
      "Adversarial accuracy on test set: 0.986\n",
      "Time elapsed: 0:02:03\n",
      "\n",
      "Epoch 9 out of 10\n",
      "Accuracy on train set: 0.995\n",
      "Accuracy on test set: 0.990\n",
      "Adversarial accuracy on train set: 0.993\n",
      "Adversarial accuracy on test set: 0.989\n",
      "Time elapsed: 0:02:17\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Initialize solver and parameters.\n",
    "solver = OptaxSolver(\n",
    "    opt=optax.adam(FLAGS.learning_rate),\n",
    "    fun=loss_fun,\n",
    "    maxiter=FLAGS.epochs * iter_per_epoch_train)\n",
    "key = jax.random.PRNGKey(0)\n",
    "params = net.init(key, jnp.zeros(input_shape))[\"params\"]\n",
    "\n",
    "state = solver.init_state(params)\n",
    "start = datetime.datetime.now().replace(microsecond=0)\n",
    "jitted_update = jax.jit(solver.update)\n",
    "\n",
    "accuracy_train = []\n",
    "accuracy_test = []\n",
    "adversarial_accuracy_train = []\n",
    "adversarial_accuracy_test = []\n",
    "for it in range(solver.maxiter):\n",
    "  # training loop\n",
    "  images, labels = next(train_ds)\n",
    "  # convert images to float as attack requires to take gradients wrt to them\n",
    "  images = images.astype(jnp.float32) / 255\n",
    "\n",
    "  adversarial_images_train = pgd_attack(\n",
    "      images, labels, params, epsilon=FLAGS.epsilon)\n",
    "  # train on adversarial images\n",
    "  params, state = jitted_update(\n",
    "      params=params,\n",
    "      state=state,\n",
    "      l2reg=FLAGS.l2reg,\n",
    "      data=(adversarial_images_train, labels))\n",
    "\n",
    "  # Once per epoch evaluate the model on the train and test sets.\n",
    "  if state.iter_num % iter_per_epoch_train == iter_per_epoch_train - 1:\n",
    "\n",
    "    # compute train set accuracy, both on clean and adversarial images\n",
    "    adversarial_accuracy_train_sample = 0.\n",
    "    accuracy_train_sample = 0.\n",
    "    for _ in range(iter_per_epoch_train):\n",
    "      images, labels = next(train_ds)\n",
    "      images = images.astype(jnp.float32) / 255\n",
    "      accuracy_train_sample += jnp.mean(accuracy(params, (images, labels))) / iter_per_epoch_train\n",
    "      adversarial_images_train = pgd_attack(\n",
    "        images, labels, params, epsilon=FLAGS.epsilon)\n",
    "      adversarial_accuracy_train_sample += jnp.mean(\n",
    "        accuracy(params, (adversarial_images_train, labels))) / iter_per_epoch_train\n",
    "    accuracy_train.append(accuracy_train_sample)\n",
    "    adversarial_accuracy_train.append(adversarial_accuracy_train_sample)\n",
    "\n",
    "    # compute train set accuracy, both on clean and adversarial images\n",
    "    adversarial_accuracy_test_sample = 0.\n",
    "    accuracy_test_sample = 0.\n",
    "    for _ in range(iter_per_epoch_test):\n",
    "      images, labels = next(test_ds)\n",
    "      images = images.astype(jnp.float32) / 255\n",
    "      accuracy_test_sample += jnp.mean(accuracy(params, (images, labels))) / iter_per_epoch_test\n",
    "      adversarial_images_test = pgd_attack(\n",
    "        images, labels, params, epsilon=FLAGS.epsilon)\n",
    "      adversarial_accuracy_test_sample += jnp.mean(\n",
    "        accuracy(params, (adversarial_images_test, labels))) / iter_per_epoch_test\n",
    "    accuracy_test.append(accuracy_test_sample)\n",
    "    adversarial_accuracy_test.append(adversarial_accuracy_test_sample)\n",
    "\n",
    "\n",
    "    time_elapsed = (datetime.datetime.now().replace(microsecond=0) - start)\n",
    "    print(f\"Epoch {it // iter_per_epoch_train} out of {FLAGS.epochs}\")\n",
    "    print(f\"Accuracy on train set: {accuracy_train[-1]:.3f}\")\n",
    "    print(f\"Accuracy on test set: {accuracy_test[-1]:.3f}\")\n",
    "    print(\n",
    "        f\"Adversarial accuracy on train set: {adversarial_accuracy_train[-1]:.3f}\"\n",
    "    )\n",
    "    print(\n",
    "        f\"Adversarial accuracy on test set: {adversarial_accuracy_test[-1]:.3f}\"\n",
    "    )\n",
    "    print(f\"Time elapsed: {time_elapsed}\")\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.title(f\"Adversarial training on {FLAGS.dataset}\")\n",
    "plt.plot(accuracy_train, lw=3, label=\"clean accuracy on train set.\" , marker='<')\n",
    "plt.plot(accuracy_test, lw=3, label=\"clean accuracy on test set.\", marker='d')\n",
    "plt.plot(\n",
    "    adversarial_accuracy_train,\n",
    "    lw=3,\n",
    "    label=\"adversarial accuracy on train set.\", marker='^')\n",
    "plt.plot(\n",
    "    adversarial_accuracy_test,\n",
    "    lw=3,\n",
    "    label=\"adversarial accuracy on test set.\", marker='>')\n",
    "plt.grid()\n",
    "plt.legend(frameon=False, ncol=2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find a test set image that is correctly classified but not its adversarial perturbation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_adversarial_imgs():\n",
    "  for _ in range(iter_per_epoch_test):\n",
    "    images, labels = next(test_ds)\n",
    "    images = images.astype(jnp.float32) / 255\n",
    "    logits = net.apply({\"params\": params}, images)\n",
    "    labels_clean = jnp.argmax(logits, axis=-1)\n",
    "\n",
    "    adversarial_images = pgd_attack(\n",
    "      images, labels, params, epsilon=FLAGS.epsilon)\n",
    "    labels_adversarial = jnp.argmax(net.apply({\"params\": params}, adversarial_images), axis=-1)\n",
    "    idx_misclassified = jnp.where(labels_clean != labels_adversarial)[0]\n",
    "    if len(idx_misclassified) == 0:\n",
    "      continue\n",
    "    else:\n",
    "      for i in idx_misclassified:\n",
    "        img_clean = images[i]\n",
    "        prediction_clean = labels_clean[i]\n",
    "        if prediction_clean != labels[i]:\n",
    "          # the clean image predicts the wrong label, skip\n",
    "          continue\n",
    "        img_adversarial = adversarial_images[i]\n",
    "        prediction_adversarial = labels_adversarial[i]\n",
    "        # we found our image\n",
    "        return img_clean, prediction_clean, img_adversarial, prediction_adversarial\n",
    "\n",
    "  raise ValueError(\"No mismatch between clean and adversarial prediction found\")\n",
    "\n",
    "img_clean, prediction_clean, img_adversarial, prediction_adversarial = \\\n",
    "  find_adversarial_imgs()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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boqIu5vSK7POcm5bFgZcwCPieWCPJvbFbFBwblsufBmhmVmmXMDNzDLlM18ZGj58eKe7YNYS/Tlhad4DNzPLlgu4mVmmXMDNzDLlAm5mlikXcDOzTPkqlAy9+uqrldiKFSuSbVNjdGyxxRbN7pJ1gWbcht7owxDWrFlTia1cuTLZduutt67ENttss4aWX0+9302nH/7gPXAzs0y5gJuZZcoF3MwsUy7gZmaZ8knMQSJ1YvK73/1usu03vvGNSix18gdgm222qcQWLlyYbOuTm3lLnWhrxkm2VpyYnDVrVrJtKrdXr16dbJvK7aeeeirZdvTo0b11cb3q/Q5a9TvvK++Bm5llygXczCxTLuBmZplyATczy9R6C7ikayStkPRETWwrSfdKeqb8N/2EUrNBzLltuevLVSjXArOA62ti5wL3RcTFks4t33+l+d3LW+rKEoCTTz65Erv77uozc+vNv/HGG1dim266abLtsmXLKrHFixcn2+65557JeBe7li7K7UafHt+f+etdGXLqqadWYvPmzavEXnvtteT8w4YNq8T6k9svvPBCsu3uu+9eidW7Pb7R3007b7tf7x54RDwEvNIjPB24rnx9HTCjud0yaz3ntuVuoMfAx0XE0vL1MmBck/pj1mnObctGwycxo/i+UHcYM0knSVogaUG9UcXMBiPntg12Ay3gyyVtC1D+mx7LFIiIKyNiSkRMSQ1tajbIOLctGwO9lX4eMBO4uPz3jqb1qIucccYZyfjcuXMrsU022aQSmz59ep8/99hjj022feONNyqxww47LNn2F7/4RSU2fvz4ZNsuNuhzuxknyVJt+zMeeL3cvummmyqx4cOHV2Kf/vSnk/OfeeaZldhxxx2XbJvK7Xqf+/DDD1diEyZMSLZNyXY8cElzgJ8CH5H0oqQTKJL7U5KeAT5ZvjfLinPbcrfePfCIOKbOpKlN7otZWzm3LXe+E9PMLFMu4GZmmXIBNzPLlB/o0CS33nprJXbjjTcm26auAkm1rfeAhfnz51dib7/9drLtFVdcUYldddVVybYf//jHK7F6D39IXVlg7dHuKx9SV03Vy+1p06ZVYqkrU+rldmpIiXq33aceeHL11Vcn26Zye9GiRcm2OeW298DNzDLlAm5mlikXcDOzTLmAm5llyicx+6neU6+POaZ6T8hHP/rRZNvZs2dXYptvvnkl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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_, axes = plt.subplots(nrows=1, ncols=2)\n",
    "\n",
    "axes[0].set_title('Clean image \\n Prediction %s' % int(prediction_clean))\n",
    "axes[0].imshow(img_clean, cmap=plt.cm.get_cmap('Greys'))\n",
    "axes[1].set_title('Adversarial image \\n Prediction %s' % prediction_adversarial)\n",
    "axes[1].imshow(img_adversarial, cmap=plt.cm.get_cmap('Greys'))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,md:myst"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
